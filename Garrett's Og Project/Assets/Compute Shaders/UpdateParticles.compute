#pragma kernel InitializeParticles
#pragma kernel ApplyDebugTransform
#pragma kernel AffineTransformChaos
#pragma kernel AffineTransformIterated
#pragma kernel ClearVoxelBuffer
#pragma kernel VoxelizePositions
#pragma kernel ClearOcclusion
#pragma kernel CalculateOcclusion

#define SIZEOF_UINT 4
#define SIZEOF_FLOAT3 12

RWByteAddressBuffer _VertexBuffer, _IndexBuffer;

void WriteVertex(uint offset, float3 v) {
    uint addr = offset * SIZEOF_FLOAT3;
    _VertexBuffer.Store3(addr, asuint(v));
}

float3 ReadVertex(uint offset) {
    uint addr = offset * SIZEOF_FLOAT3;

    return asfloat(_VertexBuffer.Load3(addr));
}

void WriteIndex(uint offset, uint i) {
    uint addr = offset * SIZEOF_UINT;
    _IndexBuffer.Store(addr, i);
}

StructuredBuffer<float4x4> _Transformations;

uint _Seed, _TransformationCount, _DebugIndex, _CubeResolution;
int _BatchIndex, _ParticleCount;
float _CubeSize;

float hash(uint n) {
    // integer hash copied from Hugo Elias
    n = (n << 13U) ^ n;
    n = n * (n * n * 15731U + 0x789221U) + 0x1376312589U;
    return float(n & uint(0x7fffffffU)) / float(0x7fffffff);
}

float3 otherTo3D(uint idx) {
    uint3 voxelRes = _CubeResolution;
    uint x = idx % (voxelRes.x);
    uint y = (idx / voxelRes.x) % voxelRes.y;
    uint z = idx / (voxelRes.x * voxelRes.y);

    return float3(x, y, z);
}

[numthreads(64,1,1)]
void InitializeParticles(uint3 id : SV_DispatchThreadID) {
    float3 pos = otherTo3D(id.x) * _CubeSize;
    uint index = id.x;

    WriteVertex(id.x, pos);
    WriteIndex(id.x, index);
}

float4x4 _DebugTransform;

[numthreads(8, 1, 1)] 
void ApplyDebugTransform(uint3 id : SV_DispatchThreadID) {
    // float4 currentPos = _PositionBuffer[id.x];

    // float4 newPosition = float4(currentPos.xyz, 1.0f);
    // newPosition = mul(_DebugTransform, newPosition);

    // _PositionBuffer[id.x] = float4(newPosition.xyz, 1);
}

uint _GridSize, _GridBounds;

float4x4 _FinalTransform;

[numthreads(64, 1, 1)] 
void AffineTransformChaos(uint3 id : SV_DispatchThreadID) {
    float3 currentPos = ReadVertex(id.x);

    uint seed = (_Seed + _BatchIndex * 100000) + id.x + ceil(dot(currentPos.xyz, float3(1112, 4123, 3324)));

    float rand = hash(seed);
    uint index = floor(rand * (_TransformationCount));

    float4x4 attractor = _Transformations[index];

    float4 newPosition = float4(currentPos, 1.0f);

    newPosition = mul(attractor, newPosition);

    if (dot(newPosition.xyz, newPosition.xyz) > 10) newPosition = 0; // If particle shot off to infinity for some stupid reason then reset it to the origin

    WriteVertex(id.x, newPosition.xyz);
}

uint _GenerationOffset, _GenerationLimit;

[numthreads(64, 1, 1)] 
void AffineTransformIterated(uint3 id : SV_DispatchThreadID) {
    uint threadID = id.x + _GenerationOffset;

    if (threadID < _GenerationLimit) { // This ensures threads that exceed the bounds of the current memory block don't do work and overwrite data, which shows how this is kind of not a good method for compute lol
        float3 seedPos = ReadVertex(floor((threadID - 1) / _TransformationCount));

        float4x4 attractor = _Transformations[threadID % _TransformationCount];
        float4 newPosition = mul(attractor, float4(seedPos, 1.0f));
        
        WriteVertex(threadID, newPosition.xyz);
    }
}

RWStructuredBuffer<int> _VoxelGrid;
uint _MemoryOffset;

uint to1D(uint3 pos) {
    return pos.x + pos.y * _GridSize + pos.z * _GridSize * _GridSize;
}

uint3 to3D(uint idx) {
    uint3 voxelRes = _GridSize;
    uint x = idx % (voxelRes.x);
    uint y = (idx / voxelRes.x) % voxelRes.y;
    uint z = idx / (voxelRes.x * voxelRes.y);

    return uint3(x, y, z);
}

[numthreads(64, 1, 1)] 
void ClearVoxelBuffer(uint3 id : SV_DispatchThreadID) {
    _VoxelGrid[id.x + _MemoryOffset] = 0;
}

[numthreads(64, 1, 1)] 
void VoxelizePositions(uint3 id : SV_DispatchThreadID) {
    float3 pos = ReadVertex(id.x);

    float3 centralPos = mul(_FinalTransform, float4(pos, 1.0f)).xyz;
    centralPos += (_GridBounds / 2.0f);
    centralPos /= _GridBounds;
    centralPos *= _GridSize;

    _VoxelGrid[to1D(centralPos)] = 1;

    for (uint i = 0; i < _TransformationCount; ++i) {
        float3 nextPos = mul(_FinalTransform, mul(_Transformations[i], float4(pos, 1.0f))).xyz;

        nextPos += (_GridBounds / 2.0f);
        nextPos /= _GridBounds;
        nextPos *= _GridSize;

        _VoxelGrid[to1D(nextPos)] = 1;
    }
}

RWStructuredBuffer<float> _OcclusionGrid;

[numthreads(64, 1, 1)] 
void ClearOcclusion(uint3 id : SV_DispatchThreadID) {
    _OcclusionGrid[id.x + _MemoryOffset] = 0;
}

[numthreads(64, 1, 1)] 
void CalculateOcclusion(uint3 id : SV_DispatchThreadID) {

    int3 pos = to3D(id.x + _MemoryOffset);

    int neighborCount = 0;
    for (int x = -1; x <= 1; ++x) {
        for (int y = -1; y <= 1; ++y) {
            for (int z = -1; z <= 1; ++z) {
                if (x == 0 && y == 0 && z == 0) continue;
                uint addr = to1D(pos - int3(x, y, z));
                neighborCount += _VoxelGrid[addr];
            }
        }
    }

    float occlusion = neighborCount / 27.0f;

    // occlusion = 1;
    // if (neighborCount == 10) occlusion = 0.25f;

    _OcclusionGrid[id.x + _MemoryOffset] = (1 - occlusion);
}